#!/usr/bin/env python
import optparse
import sys
import models
from collections import namedtuple

# Utility functions
def bitmap(sequence):
  """ Generate a coverage bitmap for a sequence of indexes """
  return reduce(lambda x,y: x|y, map(lambda i: long('1'+'0'*i,2), sequence), 0)

def bitmap2str(b, n, on='o', off='.'):
  """ Generate a length-n string representation of bitmap b """
  return '' if n==0 else (on if b&1==1 else off) + bitmap2str(b>>1, n-1, on, off)

def onbits(b):
  """ Count number of on bits in a bitmap """
  return 0 if b==0 else (1 if b&1==1 else 0) + onbits(b>>1)

def prefix1bits(b):
  """ Count number of bits encountered before first 0 """
  return 0 if b&1==0 else 1+prefix1bits(b>>1)

def last1bit(b):
  """ Return index of highest order bit that is on """
  return 0 if b==0 else 1+last1bit(b>>1)

optparser = optparse.OptionParser()
optparser.add_option("-i", "--input", dest="input", default="data/input", help="File containing sentences to translate (default=data/input)")
optparser.add_option("-t", "--translation-model", dest="tm", default="data/tm", help="File containing translation model (default=data/tm)")
optparser.add_option("-l", "--language-model", dest="lm", default="data/lm", help="File containing ARPA-format language model (default=data/lm)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxint, type="int", help="Number of sentences to decode (default=no limit)")
optparser.add_option("-k", "--translations-per-phrase", dest="k", default=1, type="int", help="Limit on number of translations to consider per phrase (default=1)")
optparser.add_option("-s", "--stack-size", dest="s", default=1, type="int", help="Maximum stack size (default=1)")
optparser.add_option("-d", "--distortion-limit", dest="d", default=0, type="int", help="Distortion limit (default=0)")
optparser.add_option("-v", "--verbose", dest="verbose", action="store_true", default=False,  help="Verbose mode (default=off)")
optparser.add_option("--weights-tm", dest="tmweights", default="",  help="Weights for Linear Translation Model (default=1.0 1.0 ... 1.0)")
optparser.add_option("--weight-lm", dest="lmweight", default=1.0, type=float, help="Language Model Weight (default=1.0)")
optparser.add_option("--weight-d", dest="dpenalty", default=0.0, type=float, help="Distortion Penalty (default=0.0)")
optparser.add_option("--weight-w", dest="wpenalty", default=0.0, type=float, help="Word Penalty (default=0.0)")
opts = optparser.parse_args()[0]

tm = models.TM(opts.tm, opts.k, opts.tmweights, opts.tmweights != "")
for e in tm:
  print tm[e]
lm = models.LM(opts.lm)
french = [tuple(line.strip().split()) for line in open(opts.input).readlines()[:opts.num_sents]]

# tm should translate unknown words as-is with probability 1
for word in set(sum(french,())):
  if (word,) not in tm:
    tm[(word,)] = [models.phrase(word, 0.0)]

def maybe_write(s):
  if opts.verbose:
    sys.stderr.write(s)

sys.stderr.write("Decoding %s...\n" % (opts.input,))
for f in french:
  # The following code implements a monotone decoding
  # algorithm (one that doesn't permute the target phrases).
  # Hence all hypotheses in stacks[i] represent translations of 
  # the first i words of the input sentence. You should generalize
  # this so that they can represent translations of *any* i words.
  dp_state = namedtuple("dp_state", "lm_state, bitmap")
  hypothesis = namedtuple("hypothesis", "logprob, state, predecessor, phrase, srcend")
  initial_state = dp_state(lm.begin(), 0)
  initial_hypothesis = hypothesis(0.0, initial_state, None, None, 0)

  stacks = [{} for _ in f] + [{}]
  stacks[0][initial_state] = initial_hypothesis
  goal_bitmap = bitmap(xrange(len(f)))

  for i, stack in enumerate(stacks[:-1]):
    maybe_write("Stack %d\n" % i)
    for h in sorted(stack.itervalues(),key=lambda h: -h.logprob)[:opts.s]: # prune
      firstopen = prefix1bits(h.state.bitmap) # first open position
      for j in xrange(firstopen, firstopen+1+opts.d):
        for k in xrange(j+1,len(f)+1):
          if f[j:k] in tm: # if translation candidates
            bitmap2add = bitmap(range(j,k))
            if h.state.bitmap & bitmap2add == 0: # if no overlap
              new_bitmap = h.state.bitmap | bitmap2add 
              if last1bit(new_bitmap) - prefix1bits(new_bitmap) <= opts.d: # if no distortion violation
                for phrase in tm[f[j:k]]: # translate!
                  logprob = h.logprob + phrase.logprob
                  lm_state = h.state.lm_state
                  for word in phrase.english.split():
                    (lm_state, word_logprob) = lm.score(lm_state, word)
                    logprob += opts.lmweight * word_logprob - opts.wpenalty
                  logprob += opts.lmweight * lm.end(lm_state) if new_bitmap == goal_bitmap else 0.0
                  logprob -= opts.dpenalty * abs(j - k)
                  new_state = dp_state(lm_state, new_bitmap)
                  new_hypothesis = hypothesis(logprob, new_state, h, phrase, k)
                  maybe_write("(%s, %s): %f + (%d, %d, %s): %f -> (%s, %s): %f\n" % 
                    (" ".join(h.state.lm_state), bitmap2str(h.state.bitmap,len(f)), h.logprob,
                     j, k, phrase.english, phrase.logprob,
                     " ".join(lm_state), bitmap2str(new_bitmap,len(f)), logprob))
                  target = onbits(new_bitmap)
                  if new_state not in stacks[target] or stacks[target][new_state].logprob < logprob: # second case is recombination
                    stacks[target][new_state] = new_hypothesis 
  winner = max(stacks[-1].itervalues(), key=lambda h: h.logprob)
  def extract_english(h): 
    return "" if h.predecessor is None else "%s%s " % (extract_english(h.predecessor), h.phrase.english)
  print extract_english(winner)

  if opts.verbose:
    def extract_tm_logprob(h):
      return 0.0 if h.predecessor is None else h.phrase.logprob + extract_tm_logprob(h.predecessor)
    tm_logprob = extract_tm_logprob(winner)
    sys.stderr.write("LM = %f, TM = %f, Total = %f\n" % 
      (winner.logprob - tm_logprob, tm_logprob, winner.logprob)) # this is no longer correct if using other than lm and tm with 1.0 weights
